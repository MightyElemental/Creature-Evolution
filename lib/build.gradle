/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.1/userguide/building_java_projects.html
 */
import static org.gradle.internal.os.OperatingSystem.*

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'application'
}

project.ext.mainClassName = "tk.mightyelemental.evolution.CreatureEvolution"

ext {
	lwjgl_natives = current() == WINDOWS ? "windows" : current() == LINUX ? "linux" : "macos"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    sourceCompatibility = 1.8
}

dependencies {
	configurations.implementation.canBeResolved=true
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    // https://mvnrepository.com/artifact/org.slick2d/slick2d-core
	implementation 'org.slick2d:slick2d-core:1.0.2'
}

task natives {
    def resolvedArtifacts = configurations.implementation.resolvedConfiguration.resolvedArtifacts
    osNatives(lwjgl_natives, resolvedArtifacts)
}

def osNatives(os, artifacts) {
    copy {
        def classifier = 'natives-' + os
        def matches = artifacts.findAll { it.classifier == classifier }
        from matches.collect { it.file }.collect { zipTree(it) }
        into "$buildDir/natives/" + os
    }
}

run {
	//def jars = sourceSets.main.runtimeClasspath.files
    //def nativeJars = jars.findAll{ it.name.contains("natives-$lwjgl_natives")}   
	
	main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
